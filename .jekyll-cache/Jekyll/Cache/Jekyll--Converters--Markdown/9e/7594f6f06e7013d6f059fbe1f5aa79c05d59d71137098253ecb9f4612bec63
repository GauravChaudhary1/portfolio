I"úR<h1 id="some-of-the-well-known-competitive-questions-and-my-try-for-solutions-on-abap-and-hana">Some of the well known competitive questions and my try for solutions on ABAP and HANA</h1>

<p>These questions are already out there on various platforms like leetcode, however, to find solutions in ABAP is quite hard for such problems.<br />
I am trying my hands on the solutions on ABAP or HANA for these as these questions are situation based. <br />
My objective would be to solve with minimal coding as much as possible.
<br /><br /></p>

<h2 id="1-given-2-tables-a-manager-table-and-an-employee-table-query-to-get-all-managers-who-have-at-least-one-male--one-female-employee-reporting-to-him">1. Given 2 tables, a manager table and an employee table, query to get all Managers who have at least one male &amp; one female employee reporting to him.</h2>

<p>This is a very simple question to begin with. I will be using aggregation functions for calculating employees under a manager.</p>

<div class="language-abap highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">a</span><span class="o">~</span><span class="k">id</span><span class="p">,</span>
       <span class="n">a</span><span class="o">~</span><span class="k">name</span><span class="p">,</span>
       <span class="nb">SUM</span><span class="p">(</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="kt">b</span><span class="o">~</span><span class="n">gender</span> <span class="o">=</span> <span class="s1">'F'</span> <span class="k">THEN</span> <span class="mi">1</span> <span class="k">ELSE</span> <span class="mi">0</span> <span class="k">END</span> <span class="p">)</span> <span class="k">as</span> <span class="n">female</span><span class="p">,</span>
       <span class="nb">SUM</span><span class="p">(</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="kt">b</span><span class="o">~</span><span class="n">gender</span> <span class="o">=</span> <span class="s1">'M'</span> <span class="k">THEN</span> <span class="mi">1</span> <span class="k">ELSE</span> <span class="mi">0</span> <span class="k">END</span> <span class="p">)</span> <span class="k">as</span> <span class="n">male</span>
  <span class="k">FROM</span> <span class="n">zmanager</span> <span class="k">as</span> <span class="n">a</span>
  <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">zemployee</span> <span class="k">as</span> <span class="kt">b</span>
  <span class="k">ON</span> <span class="n">a</span><span class="o">~</span><span class="k">id</span> <span class="o">=</span> <span class="kt">b</span><span class="o">~</span><span class="n">manager</span>
  <span class="k">INTO</span> <span class="k">TABLE</span> <span class="o">@</span><span class="k">DATA</span><span class="p">(</span><span class="n">lt_</span><span class="p">)</span>
  <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">a</span><span class="o">~</span><span class="k">id</span><span class="p">,</span> <span class="n">a</span><span class="o">~</span><span class="k">name</span><span class="p">.</span>

  <span class="k">DELETE</span> <span class="n">lt_</span> <span class="k">WHERE</span> <span class="p">(</span> <span class="n">female</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="k">or</span> <span class="n">male</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="p">).</span>
</code></pre></div></div>
<h2 id="2-given-a-string-as-an-input-parameter-to-a-program-write-code-to-identify-if-any-permutations-of-the-string-is-palindrome-or-not">2. Given a string as an input parameter to a program, write code to identify if any permutations of the string is Palindrome or not.</h2>
<p>For exmaple:<br />
<em>Given Input</em>: aab <br />
<em>Output</em>: True (aba) <br /></p>

<p><em>Given Input</em>: abc <br />
<em>Output</em>: False <br /></p>

<p><br />To calculate all the permutations of the string is basic algorithm with an idea of swapping the character until you reach the end of the string. Source of the inspiration is taken from <a href="https://www.youtube.com/watch?v=TnZHaH9i6-0&amp;t=274s"> here</a>.</p>

<div class="language-abap highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">REPORT</span> <span class="n">Z_SRTING_PERMUTE_PALINDROME</span><span class="p">.</span>

<span class="k">CLASS</span> <span class="n">lcl_main</span> <span class="k">DEFINITION</span><span class="p">.</span>
  <span class="k">PUBLIC</span> <span class="k">SECTION</span><span class="p">.</span>
    <span class="k">TYPES</span><span class="p">:</span> <span class="n">tt_array</span> <span class="k">TYPE</span> <span class="k">STANDARD</span> <span class="k">TABLE</span> <span class="k">OF</span> <span class="kt">c</span> <span class="k">WITH</span> <span class="k">DEFAULT</span> <span class="k">KEY</span><span class="p">.</span>
    <span class="k">DATA</span><span class="p">:</span> <span class="n">mt_array</span> <span class="k">TYPE</span> <span class="n">tt_array</span><span class="p">,</span>
          <span class="n">mt_permute</span> <span class="k">TYPE</span> <span class="k">SORTED</span> <span class="k">TABLE</span> <span class="k">OF</span> <span class="k">string</span> <span class="k">WITH</span> <span class="k">UNIQUE</span> <span class="k">DEFAULT</span> <span class="k">KEY</span><span class="p">.</span>
    <span class="k">METHODS</span><span class="p">:</span> <span class="n">string_to_array</span> <span class="k">IMPORTING</span> <span class="n">str</span>             <span class="k">TYPE</span> <span class="k">string</span>
                             <span class="k">RETURNING</span> <span class="nb">VALUE</span><span class="p">(</span><span class="n">rt_array</span><span class="p">)</span> <span class="k">TYPE</span> <span class="n">tt_array</span><span class="p">,</span>
      <span class="n">array_to_string</span>    <span class="k">IMPORTING</span> <span class="n">im_array</span>      <span class="k">TYPE</span> <span class="n">tt_array</span>
                         <span class="k">RETURNING</span> <span class="nb">VALUE</span><span class="p">(</span><span class="n">rv_str</span><span class="p">)</span> <span class="k">TYPE</span> <span class="k">string</span><span class="p">,</span>
      <span class="n">calc_permutations</span> <span class="k">IMPORTING</span> <span class="n">im_str</span> <span class="k">TYPE</span> <span class="k">string</span>
                                 <span class="k">left</span>   <span class="k">TYPE</span> <span class="k">i</span>
                                 <span class="k">right</span>  <span class="k">TYPE</span> <span class="k">i</span><span class="p">,</span>
      <span class="n">check_palindrome</span> <span class="k">IMPORTING</span> <span class="n">im_str</span>                  <span class="k">TYPE</span> <span class="k">string</span>
                       <span class="k">RETURNING</span> <span class="nb">VALUE</span><span class="p">(</span><span class="n">rv_is_palindrome</span><span class="p">)</span> <span class="k">TYPE</span> <span class="n">boolean</span><span class="p">,</span>
      <span class="n">swap</span> <span class="k">IMPORTING</span> <span class="n">im_str</span>        <span class="k">TYPE</span> <span class="k">string</span>
                     <span class="n">start_index</span>   <span class="k">TYPE</span> <span class="k">i</span>
                     <span class="n">target_index</span>  <span class="k">TYPE</span> <span class="k">i</span>
           <span class="k">RETURNING</span> <span class="nb">VALUE</span><span class="p">(</span><span class="n">rv_str</span><span class="p">)</span> <span class="k">TYPE</span> <span class="k">string</span><span class="p">.</span>


<span class="k">ENDCLASS</span><span class="p">.</span>

<span class="k">CLASS</span> <span class="n">lcl_main</span> <span class="k">IMPLEMENTATION</span><span class="p">.</span>
  <span class="k">METHOD</span> <span class="n">string_to_array</span><span class="p">.</span>
    <span class="k">DATA</span><span class="p">:</span> <span class="n">lv_index</span> <span class="k">TYPE</span> <span class="k">i</span><span class="p">.</span>
    <span class="k">DATA</span><span class="p">:</span> <span class="n">lt_str</span> <span class="k">TYPE</span> <span class="k">TABLE</span> <span class="k">OF</span> <span class="kt">c</span><span class="p">.</span>
    <span class="k">DATA</span><span class="p">:</span> <span class="n">lv_length</span> <span class="k">TYPE</span> <span class="k">i</span><span class="p">.</span>

    <span class="n">lv_length</span> <span class="o">=</span> <span class="nb">strlen</span><span class="p">(</span> <span class="n">str</span> <span class="p">).</span>

    <span class="k">WHILE</span> <span class="n">lv_index</span> <span class="o">&lt;</span> <span class="nb">strlen</span><span class="p">(</span> <span class="n">str</span> <span class="p">).</span>

      <span class="k">DATA</span><span class="p">(</span><span class="n">lv_char</span><span class="p">)</span> <span class="o">=</span> <span class="n">str</span><span class="p">|</span><span class="n">lv_index</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span>
      <span class="k">APPEND</span> <span class="n">lv_char</span> <span class="k">TO</span> <span class="n">lt_str</span><span class="p">.</span>
      <span class="k">ADD</span> <span class="mi">1</span> <span class="k">TO</span> <span class="n">lv_index</span><span class="p">.</span>
    <span class="k">ENDWHILE</span><span class="p">.</span>

    <span class="n">rt_array</span> <span class="o">=</span> <span class="n">lt_str</span><span class="p">.</span>
  <span class="k">ENDMETHOD</span><span class="p">.</span>

  <span class="k">METHOD</span> <span class="n">calc_permutations</span><span class="p">.</span>

    <span class="k">IF</span> <span class="k">left</span> <span class="o">=</span> <span class="k">right</span><span class="p">.</span>
      <span class="k">IF</span> <span class="n">check_palindrome</span><span class="p">(</span> <span class="n">im_str</span> <span class="p">)</span> <span class="k">IS</span> <span class="k">NOT</span> <span class="k">INITIAL</span><span class="p">.</span>
        <span class="k">INSERT</span> <span class="n">im_str</span> <span class="k">INTO</span> <span class="k">TABLE</span> <span class="n">mt_permute</span><span class="p">.</span>
      <span class="k">ENDIF</span><span class="p">.</span>
    <span class="k">ELSE</span><span class="p">.</span>
      <span class="k">DATA</span><span class="p">(</span><span class="k">i</span><span class="p">)</span> <span class="o">=</span> <span class="k">left</span><span class="p">.</span>
      <span class="k">WHILE</span> <span class="k">i</span> <span class="o">&lt;=</span> <span class="k">right</span><span class="p">.</span>

        <span class="k">DATA</span><span class="p">(</span><span class="n">lv_str</span><span class="p">)</span> <span class="o">=</span> <span class="n">swap</span><span class="p">(</span> <span class="k">EXPORTING</span> <span class="n">im_str</span> <span class="o">=</span> <span class="n">im_str</span>
                                       <span class="n">start_index</span> <span class="o">=</span> <span class="k">left</span>
                                       <span class="n">target_index</span> <span class="o">=</span> <span class="k">i</span> <span class="p">).</span>
        <span class="k">DATA</span><span class="p">(</span><span class="n">lv_left</span><span class="p">)</span> <span class="o">=</span> <span class="k">left</span> <span class="p">|</span> <span class="mi">1</span><span class="p">.</span>
        <span class="n">calc_permutations</span><span class="p">(</span> <span class="k">EXPORTING</span> <span class="n">im_str</span> <span class="o">=</span> <span class="n">lv_str</span>
                                     <span class="k">left</span> <span class="o">=</span> <span class="n">lv_left</span>
                                     <span class="k">right</span> <span class="o">=</span> <span class="k">right</span> <span class="p">).</span>
        <span class="k">i</span> <span class="o">=</span>  <span class="k">i</span> <span class="p">|</span> <span class="mi">1</span><span class="p">.</span>
      <span class="k">ENDWHILE</span><span class="p">.</span>
    <span class="k">ENDIF</span><span class="p">.</span>

  <span class="k">ENDMETHOD</span><span class="p">.</span>

  <span class="k">METHOD</span> <span class="n">check_palindrome</span><span class="p">.</span>
    <span class="k">DATA</span><span class="p">:</span> <span class="n">lv_reverse</span> <span class="k">TYPE</span> <span class="k">string</span><span class="p">.</span>

    <span class="n">lv_reverse</span> <span class="o">=</span> <span class="nb">reverse</span><span class="p">(</span> <span class="n">im_str</span> <span class="p">).</span>

    <span class="k">IF</span> <span class="nb">to_lower</span><span class="p">(</span> <span class="n">im_str</span> <span class="p">)</span> <span class="o">=</span> <span class="nb">to_lower</span><span class="p">(</span> <span class="n">lv_reverse</span> <span class="p">).</span>
      <span class="n">rv_is_palindrome</span> <span class="o">=</span> <span class="n">abap_true</span><span class="p">.</span>
    <span class="k">ELSE</span><span class="p">.</span>
      <span class="n">rv_is_palindrome</span> <span class="o">=</span> <span class="n">abap_false</span><span class="p">.</span>
    <span class="k">ENDIF</span><span class="p">.</span>
  <span class="k">ENDMETHOD</span><span class="p">.</span>

  <span class="k">METHOD</span> <span class="n">array_to_string</span><span class="p">.</span>
    <span class="k">LOOP</span> <span class="k">AT</span> <span class="n">im_array</span> <span class="k">INTO</span> <span class="k">DATA</span><span class="p">(</span><span class="n">lv_char</span><span class="p">).</span>
      <span class="n">rv_str</span> <span class="o">=</span> <span class="n">rv_str</span> <span class="o">&amp;&amp;</span> <span class="n">lv_char</span><span class="p">.</span>
    <span class="k">ENDLOOP</span><span class="p">.</span>
  <span class="k">ENDMETHOD</span><span class="p">.</span>

  <span class="k">METHOD</span> <span class="n">swap</span><span class="p">.</span>
    <span class="k">DATA</span><span class="p">:</span> <span class="n">lv_temp</span> <span class="k">TYPE</span> <span class="kt">c</span><span class="p">.</span>
    <span class="k">DATA</span><span class="p">:</span> <span class="n">lt_str</span> <span class="k">TYPE</span> <span class="k">TABLE</span> <span class="k">OF</span> <span class="kt">c</span><span class="p">.</span>

    <span class="n">lt_str</span> <span class="o">=</span> <span class="n">string_to_array</span><span class="p">(</span> <span class="n">im_str</span> <span class="p">).</span>
    <span class="n">lv_temp</span> <span class="o">=</span> <span class="n">lt_str</span><span class="p">[</span> <span class="n">start_index</span> <span class="p">].</span>
    <span class="n">lt_str</span><span class="p">[</span> <span class="n">start_index</span> <span class="p">]</span> <span class="o">=</span> <span class="n">lt_str</span><span class="p">[</span> <span class="n">target_index</span> <span class="p">].</span>
    <span class="n">lt_str</span><span class="p">[</span> <span class="n">target_index</span> <span class="p">]</span> <span class="o">=</span> <span class="n">lv_temp</span><span class="p">.</span>

    <span class="n">rv_str</span> <span class="o">=</span> <span class="n">array_to_string</span><span class="p">(</span> <span class="n">lt_str</span> <span class="p">).</span>

  <span class="k">ENDMETHOD</span><span class="p">.</span>
<span class="k">ENDCLASS</span><span class="p">.</span>


<span class="n">START</span><span class="o">-</span><span class="k">OF</span><span class="o">-</span><span class="k">SELECTION</span><span class="p">.</span>

  <span class="k">DATA</span><span class="p">:</span> <span class="n">lv_str</span> <span class="k">TYPE</span> <span class="k">string</span> <span class="k">VALUE</span> <span class="s1">'carerac'</span><span class="p">.</span>
  <span class="k">DATA</span><span class="p">:</span> <span class="n">lt_str</span> <span class="k">TYPE</span> <span class="k">TABLE</span> <span class="k">OF</span> <span class="kt">c</span><span class="p">.</span>
  <span class="k">DATA</span><span class="p">:</span> <span class="n">lo_obj</span> <span class="k">TYPE</span> <span class="k">REF</span> <span class="k">TO</span> <span class="n">lcl_main</span><span class="p">.</span>
  <span class="k">DATA</span><span class="p">:</span> <span class="n">lv_last</span> <span class="k">TYPE</span> <span class="kt">c</span><span class="p">.</span>

  <span class="k">CREATE</span> <span class="k">OBJECT</span> <span class="n">lo_obj</span><span class="p">.</span>

  <span class="n">lt_str</span> <span class="o">=</span> <span class="n">lo_obj</span><span class="o">-&gt;</span><span class="n">string_to_array</span><span class="p">(</span> <span class="n">lv_str</span> <span class="p">).</span>
  <span class="k">DATA</span><span class="p">(</span><span class="n">lv_len</span><span class="p">)</span> <span class="o">=</span> <span class="nb">strlen</span><span class="p">(</span> <span class="n">lv_str</span> <span class="p">).</span>

  <span class="n">lo_obj</span><span class="o">-&gt;</span><span class="n">calc_permutations</span><span class="p">(</span> <span class="k">EXPORTING</span> <span class="n">im_str</span> <span class="o">=</span> <span class="n">lv_str</span>
                                      <span class="k">left</span> <span class="o">=</span> <span class="mi">1</span>
                                      <span class="k">right</span> <span class="o">=</span> <span class="n">lv_len</span> <span class="p">).</span>
</code></pre></div></div>

<h2 id="3-given-a-table-which-includes-field-firstname-and-lastname-query-that-returns-the-first-and-last-name-of-each-person-in-the-table-whose-last-name-appears-at-least-twice-in-the-column-lastname">3. Given a table which includes field firstname and lastname, query that returns the first and last name of each person in the table whose last name appears at least twice in the column âlastnameâ.</h2>

<p>I have tried to do this using subquery approach.</p>

<div class="language-abap highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="k">name</span><span class="p">,</span> <span class="n">lastname</span> <span class="k">FROM</span> <span class="n">zemployee</span>
<span class="k">INTO</span> <span class="k">TABLE</span> <span class="o">@</span><span class="k">DATA</span><span class="p">(</span><span class="n">lt1_</span><span class="p">)</span>
<span class="k">WHERE</span> <span class="n">lastname</span> <span class="k">IN</span>
 <span class="p">(</span> <span class="k">SELECT</span> <span class="n">lastname</span> <span class="k">FROM</span> <span class="n">zemployee</span>
  <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">lastname</span> <span class="k">HAVING</span> <span class="nb">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="p">).</span>
</code></pre></div></div>

<h2 id="4-department-top-three-salaries">4. Department Top Three Salaries</h2>

<p>The Employee table holds all employees. Every employee has an Id, and there is also a column for the department Id.</p>

<p>| Id | Name  | Salary | DepartmentId |
|â-|ââ-|âââ|âââââ|
| 1  | Joe   | 85000  | 1            |
| 2  | Henry | 80000  | 2            |
| 3  | Sam   | 60000  | 2            |
| 4  | Max   | 90000  | 1            |
| 5  | Janet | 69000  | 1            |
| 6  | Randy | 85000  | 1            |
| 7  | Will  | 70000  | 1            |
|â-|ââ-|âââ|âââââ|
The Department table holds all departments of the company.</p>

<p>|â-|âââ-|
| Id | Name     |
|â-|âââ-|
| 1  | IT       |
| 2  | Sales    |
|â-|âââ-|
Write a SQL query to find employees who earn the top three salaries in each of the department. For the above tables, your SQL query should return the following rows (order of rows does not matter).</p>

<p>|ââââ|âââ-|âââ|
| Department | Employee | Salary |
|ââââ|âââ-|âââ|
| IT         | Max      | 90000  |
| IT         | Randy    | 85000  |
| IT         | Joe      | 85000  |
| IT         | Will     | 70000  |
| Sales      | Henry    | 80000  |
| Sales      | Sam      | 60000  |
|ââââ|âââ-|âââ|
Explanation:</p>

<p>In IT department, Max earns the highest salary, both Randy and Joe earn the second highest salary, and Will earns the third highest salary. There are only two employees in the Sales department, Henry earns the highest salary while Sam earns the second highest salary.</p>

:ET