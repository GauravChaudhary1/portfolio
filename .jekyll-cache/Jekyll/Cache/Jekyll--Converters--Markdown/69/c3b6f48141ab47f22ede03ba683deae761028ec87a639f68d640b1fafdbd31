I"-Ö<p>Using OpenCV, a user can interact and play around with a lot of media like images, videos.  </p>
<p>Following process is carried out in the classification:</p>
<ol>
  <li>Read the Images from training set, and scale them to unique size.</li>
  <li>Extract the features out of images using Singular Value Decomposition.</li>
  <li>Perform the logistic regression on the images with all features and extracted features.</li>
  <li>Perform the naive bayes on the images with all features and extracted features.</li>
</ol>

<p>Dataset for this task has been downloaded from <a href="https://www.kaggle.com/c/dogs-vs-cats/data"> here</a>.</p>

<h1 id="import-necessary-libraries">Import necessary libraries.</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">os</span><span class="p">,</span> <span class="n">cv2</span><span class="p">,</span> <span class="n">itertools</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">warnings</span>
<span class="n">warnings</span><span class="p">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s">"ignore"</span><span class="p">)</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train_dir</span> <span class="o">=</span> <span class="s">'input/train2/'</span> <span class="c1"># Directory for training set
</span><span class="n">test_dir</span> <span class="o">=</span> <span class="s">'input/test2/'</span> <span class="c1"># Directory for testing set
</span>

<span class="c1"># Images are of various sizes, therefore, all the images needs to be downscaled to size 64*64
</span><span class="n">ROWS</span> <span class="o">=</span> <span class="mi">64</span>
<span class="n">COLS</span> <span class="o">=</span> <span class="mi">64</span>
<span class="n">CHANNELS</span> <span class="o">=</span> <span class="mi">3</span>


<span class="n">train_images</span> <span class="o">=</span> <span class="p">[</span><span class="n">train_dir</span><span class="o">+</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">train_dir</span><span class="p">)]</span> <span class="c1"># use this for full dataset
</span><span class="n">test_images</span> <span class="o">=</span>  <span class="p">[</span><span class="n">test_dir</span><span class="o">+</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">test_dir</span><span class="p">)]</span>

<span class="c1"># Read the images as coloured and resize them as 64*64*3 (x * y * rgb)
</span><span class="k">def</span> <span class="nf">read_image</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
    <span class="n">img</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">imread</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">IMREAD_COLOR</span><span class="p">)</span> 
    <span class="k">return</span> <span class="n">cv2</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="p">(</span><span class="n">ROWS</span><span class="p">,</span> <span class="n">COLS</span><span class="p">),</span> <span class="n">interpolation</span><span class="o">=</span><span class="n">cv2</span><span class="p">.</span><span class="n">INTER_CUBIC</span><span class="p">)</span>

<span class="c1"># Prepare the training set and classes as dog and cat
</span><span class="k">def</span> <span class="nf">prep_data</span><span class="p">(</span><span class="n">images</span><span class="p">):</span>    
    <span class="n">m</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">images</span><span class="p">)</span>
    <span class="n">n_x</span> <span class="o">=</span> <span class="n">ROWS</span> <span class="o">*</span> <span class="n">COLS</span> <span class="o">*</span> <span class="n">CHANNELS</span>
    
    <span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">ndarray</span><span class="p">((</span><span class="n">n_x</span><span class="p">,</span> <span class="n">m</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="n">uint8</span><span class="p">)</span>
    <span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="n">m</span><span class="p">))</span>
    <span class="k">print</span> <span class="p">(</span><span class="s">"X shape is {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">X</span><span class="p">.</span><span class="n">shape</span><span class="p">))</span>
    
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">image_file</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">images</span><span class="p">):</span>
        <span class="n">image</span> <span class="o">=</span> <span class="n">read_image</span><span class="p">(</span><span class="n">image_file</span><span class="p">)</span>
        <span class="n">X</span><span class="p">[:,</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">squeeze</span><span class="p">(</span><span class="n">image</span><span class="p">.</span><span class="n">reshape</span><span class="p">((</span><span class="n">n_x</span><span class="p">,</span> <span class="mi">1</span><span class="p">)))</span>                 
        <span class="k">if</span> <span class="s">'dog'</span> <span class="ow">in</span> <span class="n">image_file</span><span class="p">.</span><span class="n">lower</span><span class="p">():</span>
            <span class="n">y</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="k">elif</span> <span class="s">'cat'</span> <span class="ow">in</span> <span class="n">image_file</span><span class="p">.</span><span class="n">lower</span><span class="p">():</span>
            <span class="n">y</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">else</span><span class="p">:</span><span class="c1"># if neither dog nor cat exist, return the image index (this is the case for test data)
</span>            <span class="n">y</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">image_file</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'/'</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="s">'.'</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="mi">1000</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="k">print</span><span class="p">(</span><span class="s">'Processed {} of {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">m</span><span class="p">))</span>
    
    <span class="k">return</span> <span class="n">X</span><span class="p">,</span> <span class="n">y</span>

<span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span> <span class="o">=</span> <span class="n">prep_data</span><span class="p">(</span><span class="n">train_images</span><span class="p">)</span>
<span class="n">X_test</span><span class="p">,</span> <span class="n">test_idx</span> <span class="o">=</span> <span class="n">prep_data</span><span class="p">(</span><span class="n">test_images</span><span class="p">)</span>

<span class="c1">#Shape-&gt; (Features, Number of Images)
</span><span class="k">print</span><span class="p">(</span><span class="s">"Train shape: {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Test shape: {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">X_test</span><span class="p">.</span><span class="n">shape</span><span class="p">))</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>X shape is (12288, 65)
Processed 0 of 65
X shape is (12288, 30)
Processed 0 of 30
Train shape: (12288, 65)
Test shape: (12288, 30)
</code></pre></div></div>

<p><b>SVD Based Features</b>
SVD is used for dimensionality reduction, however, incase of images dimensionality reduction can loose to degradation
of model performance</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">U</span><span class="p">,</span> <span class="n">D</span><span class="p">,</span> <span class="n">V</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linalg</span><span class="p">.</span><span class="n">svd</span><span class="p">(</span><span class="n">X_train</span><span class="p">)</span>
<span class="n">X_train_svd</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">matrix</span><span class="p">(</span><span class="n">U</span><span class="p">[:,</span> <span class="p">:</span><span class="mi">2</span><span class="p">])</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">diag</span><span class="p">(</span><span class="n">D</span><span class="p">[:</span><span class="mi">2</span><span class="p">])</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">matrix</span><span class="p">(</span><span class="n">V</span><span class="p">[:</span><span class="mi">2</span><span class="p">,</span> <span class="p">:])</span>
<span class="k">print</span><span class="p">(</span><span class="n">X_train_svd</span><span class="p">.</span><span class="n">T</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>


<span class="n">U</span><span class="p">,</span> <span class="n">D</span><span class="p">,</span> <span class="n">V</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linalg</span><span class="p">.</span><span class="n">svd</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
<span class="n">X_test_svd</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">matrix</span><span class="p">(</span><span class="n">U</span><span class="p">[:,</span> <span class="p">:</span><span class="mi">2</span><span class="p">])</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">diag</span><span class="p">(</span><span class="n">D</span><span class="p">[:</span><span class="mi">2</span><span class="p">])</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">matrix</span><span class="p">(</span><span class="n">V</span><span class="p">[:</span><span class="mi">2</span><span class="p">,</span> <span class="p">:])</span>
<span class="k">print</span><span class="p">(</span><span class="n">X_train_svd</span><span class="p">.</span><span class="n">T</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(65, 12288)
(65, 12288)
</code></pre></div></div>

<p><b> Check the extracted feature image </b></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">classes</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span><span class="s">'cat'</span><span class="p">,</span>
           <span class="mi">1</span><span class="p">:</span><span class="s">'dog'</span><span class="p">}</span>
<span class="c1"># Function to show a specific image
</span><span class="k">def</span> <span class="nf">show_image</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">idx</span><span class="p">):</span>
    <span class="n">image</span> <span class="o">=</span> <span class="n">X</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
    <span class="n">image</span> <span class="o">=</span> <span class="n">image</span><span class="p">.</span><span class="n">reshape</span><span class="p">((</span><span class="mi">64</span><span class="p">,</span><span class="mi">64</span><span class="p">,</span> <span class="n">CHANNELS</span><span class="p">))</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">"This is a {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">classes</span><span class="p">[</span><span class="n">y</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span><span class="mi">0</span><span class="p">]]))</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">axis</span><span class="p">(</span><span class="s">"off"</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
    
<span class="c1"># Function to show predicted image    
</span><span class="k">def</span> <span class="nf">show_image_prediction</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">idx</span><span class="p">,</span> <span class="n">model</span><span class="p">):</span>
    <span class="n">image</span> <span class="o">=</span> <span class="n">X</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">image_class</span> <span class="o">=</span> <span class="n">classes</span><span class="p">[</span><span class="n">model</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">image</span><span class="p">).</span><span class="n">item</span><span class="p">()]</span>
    <span class="n">image</span> <span class="o">=</span> <span class="n">image</span><span class="p">.</span><span class="n">reshape</span><span class="p">((</span><span class="n">ROWS</span><span class="p">,</span> <span class="n">COLS</span><span class="p">,</span> <span class="n">CHANNELS</span><span class="p">))</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">"Test {}: I think this is a {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">image_class</span><span class="p">))</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">axis</span><span class="p">(</span><span class="s">"off"</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Check the reduced size image from training set
</span><span class="n">show_image</span><span class="p">(</span><span class="n">X_train</span><span class="p">.</span><span class="n">T</span><span class="p">,</span> <span class="n">y_train</span><span class="p">.</span><span class="n">T</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="http://localhost:4000/images/20191216ImageClass/output_8_0.png" /></p>

<h1 id="logistic-regression-model-with-all-the-features">Logistic Regression Model with all the features</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sklearn.linear_model</span> <span class="kn">import</span> <span class="n">LogisticRegressionCV</span>
<span class="kn">from</span> <span class="nn">sklearn.metrics</span> <span class="kn">import</span> <span class="n">confusion_matrix</span>
<span class="n">clf</span> <span class="o">=</span> <span class="n">LogisticRegressionCV</span><span class="p">(</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">10000</span> <span class="p">)</span>
<span class="n">X_train_lr</span><span class="p">,</span> <span class="n">y_train_lr</span> <span class="o">=</span> <span class="n">X_train</span><span class="p">.</span><span class="n">T</span><span class="p">,</span> <span class="n">y_train</span><span class="p">.</span><span class="n">T</span><span class="p">.</span><span class="n">ravel</span><span class="p">()</span>
<span class="n">clf</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train_lr</span><span class="p">,</span> <span class="n">y_train_lr</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>LogisticRegressionCV(Cs=10, class_weight=None, cv='warn', dual=False,
                     fit_intercept=True, intercept_scaling=1.0, l1_ratios=None,
                     max_iter=10000, multi_class='warn', n_jobs=None,
                     penalty='l2', random_state=None, refit=True, scoring=None,
                     solver='lbfgs', tol=0.0001, verbose=0)
</code></pre></div></div>

<h1 id="logistic-regression-model-with-svd-features">Logistic Regression Model with SVD features</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">clf_svd</span> <span class="o">=</span> <span class="n">LogisticRegressionCV</span><span class="p">(</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">10000</span> <span class="p">)</span>
<span class="n">X_train_lr_svd</span><span class="p">,</span> <span class="n">y_train_lr_svd</span> <span class="o">=</span> <span class="n">X_train_svd</span><span class="p">.</span><span class="n">T</span><span class="p">,</span> <span class="n">y_train</span><span class="p">.</span><span class="n">T</span><span class="p">.</span><span class="n">ravel</span><span class="p">()</span>
<span class="n">clf_svd</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train_lr_svd</span><span class="p">,</span> <span class="n">y_train_lr_svd</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>LogisticRegressionCV(Cs=10, class_weight=None, cv='warn', dual=False,
                     fit_intercept=True, intercept_scaling=1.0, l1_ratios=None,
                     max_iter=10000, multi_class='warn', n_jobs=None,
                     penalty='l2', random_state=None, refit=True, scoring=None,
                     solver='lbfgs', tol=0.0001, verbose=0)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Function to plot the confusion matrix for specific model.
</span><span class="k">def</span> <span class="nf">plot_confusion_matrix</span><span class="p">(</span><span class="n">cm</span><span class="p">,</span> <span class="n">classes</span><span class="p">,</span>
                          <span class="n">normalize</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
                          <span class="n">title</span><span class="o">=</span><span class="s">'Confusion matrix'</span><span class="p">,</span>
                          <span class="n">cmap</span><span class="o">=</span><span class="n">plt</span><span class="p">.</span><span class="n">cm</span><span class="p">.</span><span class="n">Blues</span><span class="p">):</span>
    
    <span class="k">if</span> <span class="n">normalize</span><span class="p">:</span>
        <span class="n">cm</span> <span class="o">=</span> <span class="n">cm</span><span class="p">.</span><span class="n">astype</span><span class="p">(</span><span class="s">'float'</span><span class="p">)</span> <span class="o">/</span> <span class="n">cm</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)[:,</span> <span class="n">np</span><span class="p">.</span><span class="n">newaxis</span><span class="p">]</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Normalized confusion matrix"</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'Confusion matrix, without normalization'</span><span class="p">)</span>

    <span class="k">print</span><span class="p">(</span><span class="n">cm</span><span class="p">)</span>

    <span class="n">plt</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">cm</span><span class="p">,</span> <span class="n">interpolation</span><span class="o">=</span><span class="s">'nearest'</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="n">title</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">colorbar</span><span class="p">()</span>
    <span class="n">tick_marks</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">classes</span><span class="p">))</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">xticks</span><span class="p">(</span><span class="n">tick_marks</span><span class="p">,</span> <span class="n">classes</span><span class="p">,</span> <span class="n">rotation</span><span class="o">=</span><span class="mi">45</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">yticks</span><span class="p">(</span><span class="n">tick_marks</span><span class="p">,</span> <span class="n">classes</span><span class="p">)</span>

    <span class="n">fmt</span> <span class="o">=</span> <span class="s">'.2f'</span> <span class="k">if</span> <span class="n">normalize</span> <span class="k">else</span> <span class="s">'d'</span>
    <span class="n">thresh</span> <span class="o">=</span> <span class="n">cm</span><span class="p">.</span><span class="nb">max</span><span class="p">()</span> <span class="o">/</span> <span class="mf">2.</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">itertools</span><span class="p">.</span><span class="n">product</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="n">cm</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="nb">range</span><span class="p">(</span><span class="n">cm</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">])):</span>
        <span class="n">plt</span><span class="p">.</span><span class="n">text</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="nb">format</span><span class="p">(</span><span class="n">cm</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">],</span> <span class="n">fmt</span><span class="p">),</span>
                 <span class="n">horizontalalignment</span><span class="o">=</span><span class="s">"center"</span><span class="p">,</span>
                 <span class="n">color</span><span class="o">=</span><span class="s">"white"</span> <span class="k">if</span> <span class="n">cm</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">thresh</span> <span class="k">else</span> <span class="s">"black"</span><span class="p">)</span>

    <span class="n">plt</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">()</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'True label'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Predicted label'</span><span class="p">)</span>

</code></pre></div></div>

<h1 id="lr-confusion-matrix-for-all-features">LR Confusion Matrix for All features</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">"LR Model(All features) accuracy: {:.2f}%"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">clf</span><span class="p">.</span><span class="n">score</span><span class="p">(</span><span class="n">X_train_lr</span><span class="p">,</span> <span class="n">y_train_lr</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
<span class="n">plot_confusion_matrix</span><span class="p">(</span><span class="n">confusion_matrix</span><span class="p">(</span><span class="n">y_train_lr</span><span class="p">,</span> <span class="n">clf</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_train_lr</span><span class="p">)),</span> <span class="p">[</span><span class="s">'cat'</span><span class="p">,</span> <span class="s">'dog'</span><span class="p">])</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>LR Model(All features) accuracy: 100.00%
Confusion matrix, without normalization
[[31  0]
 [ 0 34]]
</code></pre></div></div>

<p><img src="http://localhost:4000/images/20191216ImageClass/output_15_1.png" /></p>

<h1 id="lr-confusion-matrix-for-svd-features">LR Confusion Matrix for SVD features</h1>

<h1 id="it-can-be-noticed-that-with-svd-features-accuracy-of-model-is-degraded">It can be noticed that with SVD features, accuracy of model is degraded.</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">"LR Model(SVD features) accuracy: {:.2f}%"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">clf_svd</span><span class="p">.</span><span class="n">score</span><span class="p">(</span><span class="n">X_train_lr_svd</span><span class="p">,</span> <span class="n">y_train_lr_svd</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
<span class="n">plot_confusion_matrix</span><span class="p">(</span><span class="n">confusion_matrix</span><span class="p">(</span><span class="n">y_train_lr_svd</span><span class="p">,</span> <span class="n">clf_svd</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_train_lr_svd</span><span class="p">)),</span> <span class="p">[</span><span class="s">'cat'</span><span class="p">,</span> <span class="s">'dog'</span><span class="p">])</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>LR Model(SVD features) accuracy: 53.85%
Confusion matrix, without normalization
[[ 6 25]
 [ 5 29]]
</code></pre></div></div>

<p><img src="http://localhost:4000/images/20191216ImageClass/output_18_1.png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Test the prediction of the Model
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X_test_lr</span><span class="p">,</span> <span class="n">test_idx</span> <span class="o">=</span> <span class="n">X_test</span><span class="p">.</span><span class="n">T</span><span class="p">,</span> <span class="n">test_idx</span><span class="p">.</span><span class="n">T</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">X_test_lr</span><span class="p">),</span> <span class="mi">1</span><span class="p">):</span>
    <span class="n">show_image_prediction</span><span class="p">(</span><span class="n">X_test_lr</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">clf</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="http://localhost:4000/images/20191216ImageClass/output_20_0.png" /></p>

<h1 id="naive-bayes-with-all-the-features">Naive Bayes with all the features</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sklearn.naive_bayes</span> <span class="kn">import</span> <span class="n">GaussianNB</span>
<span class="n">nb</span> <span class="o">=</span> <span class="n">GaussianNB</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nb</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train_lr</span><span class="p">,</span> <span class="n">y_train_lr</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GaussianNB(priors=None, var_smoothing=1e-09)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">"NB Model(All features) accuracy: {:.2f}%"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">nb</span><span class="p">.</span><span class="n">score</span><span class="p">(</span><span class="n">X_train_lr</span><span class="p">,</span> <span class="n">y_train_lr</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
<span class="n">plot_confusion_matrix</span><span class="p">(</span><span class="n">confusion_matrix</span><span class="p">(</span><span class="n">y_train_lr</span><span class="p">,</span> <span class="n">nb</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_train_lr</span><span class="p">)),</span> <span class="p">[</span><span class="s">'cat'</span><span class="p">,</span> <span class="s">'dog'</span><span class="p">])</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NB Model(All features) accuracy: 83.08%
Confusion matrix, without normalization
[[24  7]
 [ 4 30]]
</code></pre></div></div>

<p><img src="http://localhost:4000/images/20191216ImageClass/output_24_1.png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X_test_lr</span><span class="p">,</span> <span class="n">test_idx</span> <span class="o">=</span> <span class="n">X_test</span><span class="p">.</span><span class="n">T</span><span class="p">,</span> <span class="n">test_idx</span><span class="p">.</span><span class="n">T</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">X_test_lr</span><span class="p">),</span> <span class="mi">1</span><span class="p">):</span>
    <span class="n">show_image_prediction</span><span class="p">(</span><span class="n">X_test_lr</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">nb</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="http://localhost:4000/images/20191216ImageClass/output_25_0.png" /></p>

<h1 id="models-with-intensity-based-features">Models with Intensity based features</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">read_image_intense</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
    <span class="n">img</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">imread</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">IMREAD_COLOR</span><span class="p">)</span>
    <span class="n">gray</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">cvtColor</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">COLOR_BGR2GRAY</span><span class="p">)</span>
<span class="c1">#     neg = 255 - img
</span>    <span class="k">return</span> <span class="n">cv2</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">gray</span><span class="p">,</span> <span class="p">(</span><span class="n">ROWS</span><span class="p">,</span> <span class="n">COLS</span><span class="p">),</span> <span class="n">interpolation</span><span class="o">=</span><span class="n">cv2</span><span class="p">.</span><span class="n">INTER_CUBIC</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">prep_data_intense</span><span class="p">(</span><span class="n">images</span><span class="p">):</span>    
    <span class="n">m</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">images</span><span class="p">)</span>
    <span class="n">n_x</span> <span class="o">=</span> <span class="n">ROWS</span> <span class="o">*</span> <span class="n">COLS</span>
    
    <span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">ndarray</span><span class="p">((</span><span class="n">n_x</span><span class="p">,</span> <span class="n">m</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="n">uint8</span><span class="p">)</span>
    <span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="n">m</span><span class="p">))</span>
    <span class="k">print</span> <span class="p">(</span><span class="s">"X shape is {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">X</span><span class="p">.</span><span class="n">shape</span><span class="p">))</span>
    
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">image_file</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">images</span><span class="p">):</span>
        <span class="n">image</span> <span class="o">=</span> <span class="n">read_image_intense</span><span class="p">(</span><span class="n">image_file</span><span class="p">)</span>
        <span class="n">X</span><span class="p">[:,</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">squeeze</span><span class="p">(</span><span class="n">image</span><span class="p">.</span><span class="n">reshape</span><span class="p">((</span><span class="n">n_x</span><span class="p">,</span> <span class="mi">1</span><span class="p">)))</span>                 
        <span class="k">if</span> <span class="s">'dog'</span> <span class="ow">in</span> <span class="n">image_file</span><span class="p">.</span><span class="n">lower</span><span class="p">():</span>
            <span class="n">y</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="k">elif</span> <span class="s">'cat'</span> <span class="ow">in</span> <span class="n">image_file</span><span class="p">.</span><span class="n">lower</span><span class="p">():</span>
            <span class="n">y</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">else</span><span class="p">:</span><span class="c1"># if neither dog nor cat exist, return the image index (this is the case for test data)
</span>            <span class="n">y</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">image_file</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'/'</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="s">'.'</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="mi">1000</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="k">print</span><span class="p">(</span><span class="s">'Processed {} of {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">m</span><span class="p">))</span>
    
    <span class="k">return</span> <span class="n">X</span><span class="p">,</span> <span class="n">y</span>

<span class="n">X_train_i</span><span class="p">,</span> <span class="n">y_train_i</span> <span class="o">=</span> <span class="n">prep_data_intense</span><span class="p">(</span><span class="n">train_images</span><span class="p">)</span>
<span class="n">X_test_i</span><span class="p">,</span> <span class="n">test_idx_i</span> <span class="o">=</span> <span class="n">prep_data_intense</span><span class="p">(</span><span class="n">test_images</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">"Train shape: {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">X_train_i</span><span class="p">.</span><span class="n">shape</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Test shape: {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">X_test_i</span><span class="p">.</span><span class="n">shape</span><span class="p">))</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>X shape is (4096, 65)
Processed 0 of 65
X shape is (4096, 30)
Processed 0 of 30
Train shape: (4096, 65)
Test shape: (4096, 30)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">show_image_intense</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">idx</span><span class="p">):</span>
    <span class="n">image</span> <span class="o">=</span> <span class="n">X</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
    <span class="n">image</span> <span class="o">=</span> <span class="n">image</span><span class="p">.</span><span class="n">reshape</span><span class="p">((</span><span class="mi">64</span><span class="p">,</span><span class="mi">64</span><span class="p">))</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">"This is a {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">classes</span><span class="p">[</span><span class="n">y</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span><span class="mi">0</span><span class="p">]]))</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">axis</span><span class="p">(</span><span class="s">"off"</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
    
<span class="k">def</span> <span class="nf">show_image_prediction_intense</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">idx</span><span class="p">,</span> <span class="n">model</span><span class="p">):</span>
    <span class="n">image</span> <span class="o">=</span> <span class="n">X</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">image_class</span> <span class="o">=</span> <span class="n">classes</span><span class="p">[</span><span class="n">model</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">image</span><span class="p">).</span><span class="n">item</span><span class="p">()]</span>
    <span class="n">image</span> <span class="o">=</span> <span class="n">image</span><span class="p">.</span><span class="n">reshape</span><span class="p">((</span><span class="n">ROWS</span><span class="p">,</span> <span class="n">COLS</span><span class="p">))</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">"Test {}: I think this is a {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">image_class</span><span class="p">))</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">axis</span><span class="p">(</span><span class="s">"off"</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">show_image_intense</span><span class="p">(</span><span class="n">X_train_i</span><span class="p">.</span><span class="n">T</span><span class="p">,</span> <span class="n">y_train_i</span><span class="p">.</span><span class="n">T</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="http://localhost:4000/images/20191216ImageClass/output_29_0.png" /></p>

<h1 id="lr-model-on-intensity-based-features">LR Model on intensity based features</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">clf_i</span> <span class="o">=</span> <span class="n">LogisticRegressionCV</span><span class="p">(</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">10000</span> <span class="p">)</span>
<span class="n">X_train_in</span><span class="p">,</span> <span class="n">y_train_in</span> <span class="o">=</span> <span class="n">X_train_i</span><span class="p">.</span><span class="n">T</span><span class="p">,</span> <span class="n">y_train_i</span><span class="p">.</span><span class="n">T</span><span class="p">.</span><span class="n">ravel</span><span class="p">()</span>
<span class="n">clf_i</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train_in</span><span class="p">,</span> <span class="n">y_train_in</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>LogisticRegressionCV(Cs=10, class_weight=None, cv='warn', dual=False,
                     fit_intercept=True, intercept_scaling=1.0, l1_ratios=None,
                     max_iter=10000, multi_class='warn', n_jobs=None,
                     penalty='l2', random_state=None, refit=True, scoring=None,
                     solver='lbfgs', tol=0.0001, verbose=0)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">"LR Model(Intensity) accuracy: {:.2f}%"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">clf_i</span><span class="p">.</span><span class="n">score</span><span class="p">(</span><span class="n">X_train_in</span><span class="p">,</span> <span class="n">y_train_in</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
<span class="n">plot_confusion_matrix</span><span class="p">(</span><span class="n">confusion_matrix</span><span class="p">(</span><span class="n">y_train_in</span><span class="p">,</span> <span class="n">clf_i</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_train_in</span><span class="p">)),</span> <span class="p">[</span><span class="s">'cat'</span><span class="p">,</span> <span class="s">'dog'</span><span class="p">])</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>LR Model(Intensity) accuracy: 100.00%
Confusion matrix, without normalization
[[31  0]
 [ 0 34]]
</code></pre></div></div>

<p><img src="http://localhost:4000/images/20191216ImageClass/output_32_1.png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X_test_i</span><span class="p">,</span> <span class="n">test_idx_i</span> <span class="o">=</span> <span class="n">X_test_i</span><span class="p">.</span><span class="n">T</span><span class="p">,</span> <span class="n">test_idx_i</span><span class="p">.</span><span class="n">T</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">X_test_i</span><span class="p">),</span> <span class="mi">1</span><span class="p">):</span>
    <span class="n">show_image_prediction_intense</span><span class="p">(</span><span class="n">X_test_i</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">clf_i</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="http://localhost:4000/images/20191216ImageClass/output_33_0.png" /></p>

<h1 id="naive-bayes-model-for-intensity-features">Naive Bayes Model for intensity features</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nb_i</span> <span class="o">=</span> <span class="n">GaussianNB</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X_train_in</span><span class="p">,</span> <span class="n">y_train_in</span> <span class="o">=</span> <span class="n">X_train_i</span><span class="p">.</span><span class="n">T</span><span class="p">,</span> <span class="n">y_train_i</span><span class="p">.</span><span class="n">T</span><span class="p">.</span><span class="n">ravel</span><span class="p">()</span>
<span class="n">nb_i</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train_in</span><span class="p">,</span> <span class="n">y_train_in</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GaussianNB(priors=None, var_smoothing=1e-09)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">"NB Model(Intensity) accuracy: {:.2f}%"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">nb_i</span><span class="p">.</span><span class="n">score</span><span class="p">(</span><span class="n">X_train_in</span><span class="p">,</span> <span class="n">y_train_in</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
<span class="n">plot_confusion_matrix</span><span class="p">(</span><span class="n">confusion_matrix</span><span class="p">(</span><span class="n">y_train_in</span><span class="p">,</span> <span class="n">nb_i</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_train_in</span><span class="p">)),</span> <span class="p">[</span><span class="s">'cat'</span><span class="p">,</span> <span class="s">'dog'</span><span class="p">])</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NB Model(Intensity) accuracy: 80.00%
Confusion matrix, without normalization
[[24  7]
 [ 6 28]]
</code></pre></div></div>

<p><img src="http://localhost:4000/images/20191216ImageClass/output_37_1.png" /></p>

:ET